name: Terraform Setup and Apply
#on:
#  schedule:
#    - cron: '0 12 * * 1'
on: [workflow_dispatch]
jobs:
  rotate:
    name: Terraform Setup and Apply
    runs-on: ubuntu-latest
    permissions:
       contents: 'read'
       id-token: 'write'
          
    steps:
      - uses: actions/checkout@v2.0.0
      #- name: Setup GCP Service Account
      #  uses: google-github-actions/setup-gcloud@master
      #  with:
       #   service_account_key: ${{ secrets.GCP_SA_INFRA_KEY }}
       #   export_default_credentials: true
         # Configure Workload Identity Federation and generate an access token.
          # Add "id-token" with the intended permissions.

      - id: 'auth'
        name: 'Authenticate to Google Cloud'
        uses: 'google-github-actions/auth@v0.4.0'
        with:
          token_format: 'access_token'
          workload_identity_provider: 'projects/626683705113/locations/global/workloadIdentityPools/my-pool/providers/my-provider'
          service_account: 'terraform@gcpproject-324922.iam.gserviceaccount.com'
          access_token_lifetime: '300s' # optional, default: '3600s' (1 hour)
          create_credentials_file: true
          activate_credentials_file: true
       
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          # terraform_version: 0.13.0
          cli_config_credentials_token: ${{ secrets.GCP_SA_INFRA_KEY }}
          project_id: ${{ secrets.RUN_PROJECT_DEV }}
          
      - name: Terraform Init
        run: terraform init
        #env:
            #GOOGLE_CREDENTIALS: ${{ secrets.GCP_SA_INFRA_KEY }}
           
      # Checks that all Terraform configuration files adhere to a canonical format
      #- name: Terraform Format
      #  run: terraform fmt -check

      # Generates an execution plan for Terraform
      - name: Terraform Plan
        run: terraform plan
        #env:
          # GOOGLE_CREDENTIALS: ${{ secrets.GCP_SA_INFRA_KEY }}

        # On push to main, build or change infrastructure according to Terraform configuration files
        # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
      - name: Terraform Apply
        #if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -auto-approve
        #env:
            #GOOGLE_CREDENTIALS: ${{ secrets.GCP_SA_INFRA_KEY }}
